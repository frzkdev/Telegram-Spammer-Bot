from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder

import asyncio
import config, user
from sqliter import DBConnection

bot = Bot(token=config.TOKEN)
dp = Dispatcher(storage=MemoryStorage())
db = DBConnection()


def welcome_keyboard():
    keyboard = ReplyKeyboardBuilder()
    keyboard.add(KeyboardButton(text='üë§ –ê–∫–∫–∞—É–Ω—Ç'))
    keyboard.add(KeyboardButton(text='‚ùì –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã'))
    keyboard.add(KeyboardButton(text='üî¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª'))
    keyboard.add(KeyboardButton(text='üìë –ü–æ—Å—Ç'))
    keyboard.add(KeyboardButton(text='‚û°Ô∏è START'))
    keyboard.adjust(2)
    return keyboard.as_markup(resize_keyboard=True)

@dp.message(Command("start"))
async def process_start_command(message: types.Message):
    if message.chat.id == config.ADMIN:
        await message.answer("üíæ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –≥—Ä—É–ø–∞–º:\n\n", reply_markup=welcome_keyboard())
    else:
        await message.answer("‚ùå –í–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞.")

class AdditionStates(StatesGroup):
    id = State()

class PostStates(StatesGroup):
    text = State()

class TimeStates(StatesGroup):
    timeout = State()

class AddChatStates(StatesGroup):
    chat_id = State()

class AccountStates(StatesGroup):
    phone = State()
    name = State()
    api_id = State()
    api_hash = State()
    code = State()
    password = State()

@dp.message(AdditionStates.id)
async def input_additional_text(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        channel_id = data['channel_id']
        db.add_additional_text(channel_id, message.text)
        await message.answer(f'‚òëÔ∏è –¢–µ–∫—Å—Ç –¥–ª—è {channel_id} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.')
        await state.clear()
    except:
        await message.answer(f'‚ùå –¢–µ–∫—Å—Ç –¥–ª—è {channel_id} –Ω–µ –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω.')

@dp.message(PostStates.text)
async def input_post_text(message: types.Message, state: FSMContext):
    db.change_text(message.text)
    await message.answer('‚òëÔ∏è –¢–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞ –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω.')
    await state.clear()

@dp.message(TimeStates.timeout)
async def input_timeout(message: types.Message, state: FSMContext):
    try:
        if int(message.text) > 1:
            db.setTimeOut(message.text)
            await message.answer('‚òëÔ∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª —Ä–∞—Å—Å—ã–ª–∫–∏ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.')
        else:
            await message.answer('‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 1.')
    except:
        await message.answer('‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.')
    await state.clear()

@dp.message(F.text == '‚ùì –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã')
async def show_channels(message: types.Message):
    keyboard = InlineKeyboardBuilder()
    
    chats = db.get_all_chats()
    
    if not chats:
        keyboard.add(InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç', callback_data='ADD_CHAT'))
        await message.answer('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤. –î–æ–±–∞–≤—å—Ç–µ —á–∞—Ç—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:', reply_markup=keyboard.as_markup())
    else:
        for chat in chats:
            keyboard.add(InlineKeyboardButton(text=chat["title"], callback_data=f'EDIT_ID:{chat["id"]}'))
        keyboard.add(InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç', callback_data='ADD_CHAT'))
        keyboard.adjust(1)
        await message.answer('–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:', reply_markup=keyboard.as_markup())

@dp.message(F.text == '‚û°Ô∏è START')
async def start_spam_command(message: types.Message):
    db.setSpam(1)
    keyboard = ReplyKeyboardBuilder()
    keyboard.add(KeyboardButton(text='üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ø–∞–º'))
    await message.answer('üòä –°–ø–∞–º –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.', reply_markup=keyboard.as_markup(resize_keyboard=True))
    await start_spam("–ó–∞–∫–∞–∑–∞—Ç—å —Ç–≥ –±–æ—Ç–∞ - @peacefulb")

@dp.message(F.text == 'üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ø–∞–º')
async def stop_spam(message: types.Message):
    db.setSpam(0)
    await message.answer('üòä –û—Ç–ø—Ä–∞–≤–ª—è—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∑–∞–∫—Ä—É–≥–ª—è—é—Å—å', reply_markup=welcome_keyboard())

@dp.message(F.text == 'üî¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª')
async def show_interval(message: types.Message):
    settings = db.settings()
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text='üïò –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª', callback_data='INTERVAL'))
    await message.answer(f'üîÉ –¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª {settings[5]} –º–∏–Ω—É—Ç(–∞)', reply_markup=keyboard.as_markup())

@dp.message(F.text == 'üë§ –ê–∫–∫–∞—É–Ω—Ç')
async def show_accounts(message: types.Message):
    accounts = db.get_all_accounts()
    keyboard = InlineKeyboardBuilder()
    
    if not accounts:
        keyboard.add(InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç', callback_data='ADD_ACCOUNT'))
        await message.answer('–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:', reply_markup=keyboard.as_markup())
    else:
        for account in accounts:
            status_emoji = "üü¢" if account['status'] == 'active' else "üî¥"
            keyboard.add(InlineKeyboardButton(
                text=f"{status_emoji} {account['name']} ({account['phone']})", 
                callback_data=f'ACCOUNT_{account["id"]}'
            ))
        keyboard.add(InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç', callback_data='ADD_ACCOUNT'))
        keyboard.adjust(1)
        await message.answer('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏:', reply_markup=keyboard.as_markup())

@dp.message(F.text == 'üìë –ü–æ—Å—Ç')
async def show_post(message: types.Message):
    import os
    settings = db.settings()
    
    photo_path = settings[1] if settings[1] else None
    text = settings[2] if settings[2] else "–¢–µ–∫—Å—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    
    try:
        if photo_path and photo_path.strip() and os.path.exists(f'{config.DIR}{photo_path}'):
            from aiogram.types import FSInputFile
            photo_file = FSInputFile(f'{config.DIR}{photo_path}')
            await message.answer_photo(photo_file, caption=text)
        else:
            await message.answer(f"üìÑ –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:\n\n{text}")
    except Exception as e:
        await message.answer(f"üìÑ –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:\n\n{text}")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ñ–æ—Ç–æ: {e}")

    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text='üåÜ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ', callback_data='EDIT_PHOTO'))
    keyboard.add(InlineKeyboardButton(text='üìú –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç', callback_data='EDIT_TEXT'))
    keyboard.adjust(1)
    await message.answer('üîº –í–∞—à –ø–æ—Å—Ç –≤—ã–≥–ª—è–¥–∏—Ç –≤–æ—Ç —Ç–∞–∫ üîº', reply_markup=keyboard.as_markup())

@dp.callback_query(F.data.startswith('EDIT_ID:'))
async def handle_edit_id(callback: types.CallbackQuery, state: FSMContext):
    channel_id = callback.data.split(':')[1]
    try:
        addit_text = db.get_additional_text(channel_id)[0]
    except:
        addit_text = None
    
    channel_title = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª"
    try:
        chats = db.get_all_chats()
        for chat in chats:
            if str(chat['id']) == str(channel_id):
                channel_title = chat['title']
                break
    except:
        pass
    
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text='‚ùå –ü–æ–∫–∏–Ω—É—Ç—å —á–∞—Ç', callback_data=f'LFC:{channel_id}'))
    
    keyboard.add(InlineKeyboardButton(text='‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ', callback_data=f'ADD_ADDITIONAL:{channel_id}'))
    await callback.message.answer(f'–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: "{channel_title}"', reply_markup=keyboard.as_markup())
    
    await callback.answer()

@dp.callback_query(F.data.startswith('ADD_ADDITIONAL:'))
async def handle_add_additional(callback: types.CallbackQuery, state: FSMContext):
    channel_id = callback.data.split(':')[1]
    await state.update_data(channel_id=channel_id)
    await callback.message.answer(f'‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:')
    await state.set_state(AdditionStates.id)
    await callback.answer()

@dp.callback_query(F.data.startswith('LFC:'))
async def handle_leave_from_channel(callback: types.CallbackQuery):
    log = await user.leave_from_channel(callback.data.split(':')[1])
    if log:
        text = '‚òëÔ∏è –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ –¥–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª.'
    else:
        text = '‚ùå –í–æ–∑–Ω–∏–∫–ª–∏ –Ω–µ–∫–∏–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ.'
    await callback.message.answer(text)
    await callback.answer()

@dp.callback_query(F.data == 'EDIT_TEXT')
async def handle_edit_text(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer('üìÑ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:')
    await state.set_state(PostStates.text)
    await callback.answer()

@dp.callback_query(F.data == 'EDIT_PHOTO')
async def handle_edit_photo(callback: types.CallbackQuery):
    await callback.message.answer('üìÑ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:')
    await callback.answer()

@dp.callback_query(F.data == 'INTERVAL')
async def handle_interval(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer('üìÑ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ä–∞—Å—Å—ã–ª–∫–∏ –º–µ–∂–¥—É —á–∞—Ç–∞–º–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö):')
    await state.set_state(TimeStates.timeout)
    await callback.answer()

@dp.callback_query(F.data == 'ADD_CHAT')
async def handle_add_chat(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer('üìÑ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º:\n\n–ü—Ä–∏–º–µ—Ä—ã:\n‚Ä¢ https://t.me/channel_name\n‚Ä¢ t.me/channel_name\n‚Ä¢ @channel_name\n‚Ä¢ channel_name\n\n‚ö†Ô∏è –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!')
    await state.set_state(AddChatStates.chat_id)
    await callback.answer()

@dp.message(AddChatStates.chat_id)
async def input_chat_id(message: types.Message, state: FSMContext):
    try:
        chat_input = message.text.strip()
        
        if chat_input.startswith('https://t.me/'):
            username = chat_input.replace('https://t.me/', '').split('/')[0]
        elif chat_input.startswith('t.me/'):
            username = chat_input.replace('t.me/', '').split('/')[0]
        elif chat_input.startswith('@'):
            username = chat_input[1:]
        else:
            username = chat_input
        if username.startswith('@'):
            username = username[1:]
        
        try:
            chat = await bot.get_chat(f'@{username}')
            chat_id = str(chat.id)
            chat_title = chat.title or chat.first_name or f"Chat {username}"
            
            db.add_chat(chat_id, chat_title)
            await message.answer(f'‚úÖ –ö–∞–Ω–∞–ª "{chat_title}" (@{username}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\nID: {chat_id}')
            
        except Exception as e:
            await message.answer(f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª @{username}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è\n‚Ä¢ –ß—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª\n‚Ä¢ –ß—Ç–æ –∫–∞–Ω–∞–ª –ø—É–±–ª–∏—á–Ω—ã–π –∏–ª–∏ –±–æ—Ç –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø')
        
        await state.clear()
    except Exception as e:
        await message.answer(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —á–∞—Ç–∞: {e}')
        await state.clear()

@dp.callback_query(F.data == 'ADD_ACCOUNT')
async def handle_add_account(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer('üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:')
    await state.set_state(AccountStates.phone)
    await callback.answer()

@dp.message(AccountStates.phone)
async def input_phone(message: types.Message, state: FSMContext):
    phone = message.text.strip()
    await state.update_data(phone=phone)
    await message.answer('üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞:')
    await state.set_state(AccountStates.name)

@dp.message(AccountStates.name)
async def input_name(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        phone = data['phone']
        name = message.text.strip()
        
        await state.update_data(name=name)
        
        await asyncio.sleep(2)
        await message.answer(
            "üîë –í–≤–µ–¥–∏—Ç–µ API_ID:\n\n"
            "–ü–æ–ª—É—á–∏—Ç—å –º–æ–∂–Ω–æ –Ω–∞ https://my.telegram.org/auth\n\n"
            "‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–¥–æ–∂–¥–∞—Ç—å 5-10 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∞–∫–∫–∞—É–Ω—Ç–æ–≤"
        )
        await state.set_state(AccountStates.api_id)
    except Exception as e:
        await message.answer(f'‚ùå –û—à–∏–±–∫–∞: {e}')
        await state.clear()

@dp.message(AccountStates.api_id)
async def input_api_id(message: types.Message, state: FSMContext):
    try:
        api_id = message.text.strip()
        
        if not api_id.isdigit():
            await message.answer("‚ùå API_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        await state.update_data(api_id=api_id)
        
        await message.answer(
            "üîë –í–≤–µ–¥–∏—Ç–µ API_HASH:\n\n"
            "–ü–æ–ª—É—á–∏—Ç—å –º–æ–∂–Ω–æ –Ω–∞ https://my.telegram.org/auth"
        )
        await state.set_state(AccountStates.api_hash)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        await state.clear()

@dp.message(AccountStates.api_hash)
async def input_api_hash(message: types.Message, state: FSMContext):
    try:
        api_hash = message.text.strip()
        
        await state.update_data(api_hash=api_hash)
        
        data = await state.get_data()
        phone = data['phone']
        name = data['name']
        api_id = data['api_id']
        api_hash = data['api_hash']
        
        session_file = f"account_{phone.replace('+', '').replace('-', '').replace(' ', '')}"
        
        await state.update_data(session_file=session_file)
        temp_account = {
            'phone': phone, 
            'name': name, 
            'session_file': session_file,
            'api_id': api_id,
            'api_hash': api_hash
        }
        
        from telegram_auth import TelegramAuth
        auth = TelegramAuth(temp_account, bot, config.ADMIN)
        unique_key = f"auth_{phone}_{name}"
        await state.update_data(auth=auth, unique_key=unique_key)
        
        success = await auth.start_auth()
        if success:
            await state.set_state(AccountStates.code)
        else:
            await message.answer('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
            await state.clear()
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        await state.clear()

@dp.message(AccountStates.code)
async def input_code(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        auth = data['auth']
        code = message.text.strip()
        
        result = await auth.verify_code(code)
        
        if result == True:
            phone = data['phone']
            name = data['name']
            session_file = data['session_file']
            api_id = data['api_id']
            api_hash = data['api_hash']
            
            if db.add_account(phone, name, session_file, api_id, api_hash):
                await message.answer(f'‚úÖ –ê–∫–∫–∞—É–Ω—Ç "{name}" ({phone}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!')
            else:
                await message.answer('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –±–∞–∑—É')
            
            await state.clear()
        elif result == "password_needed":
            await state.set_state(AccountStates.password)
        elif result == "new_code_sent":
            pass
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            
    except Exception as e:
        await message.answer(f'‚ùå –û—à–∏–±–∫–∞: {e}')
        await state.clear()

@dp.message(AccountStates.password)
async def input_password(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        auth = data['auth']
        password = message.text.strip()
        
        result = await auth.verify_password(password)
        
        if result:
            phone = data['phone']
            name = data['name']
            session_file = data['session_file']
            api_id = data['api_id']
            api_hash = data['api_hash']
            
            if db.add_account(phone, name, session_file, api_id, api_hash):
                await message.answer(f'‚úÖ –ê–∫–∫–∞—É–Ω—Ç "{name}" ({phone}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!')
            else:
                await message.answer('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –±–∞–∑—É')
            
            await state.clear()
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            
    except Exception as e:
        await message.answer(f'‚ùå –û—à–∏–±–∫–∞: {e}')
        await state.clear()

@dp.callback_query(F.data.startswith('ACCOUNT_'))
async def handle_account_click(callback: types.CallbackQuery):
    account_id = callback.data.split('_')[1]
    account = db.get_account_by_id(account_id)
    
    if account:
        keyboard = InlineKeyboardBuilder()
        
        if account['status'] == 'active':
            keyboard.add(InlineKeyboardButton(text='üî¥ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å', callback_data=f'DEACTIVATE_{account_id}'))
        else:
            keyboard.add(InlineKeyboardButton(text='üü¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å', callback_data=f'ACTIVATE_{account_id}'))
        
        keyboard.add(InlineKeyboardButton(text='üóë –£–¥–∞–ª–∏—Ç—å', callback_data=f'DELETE_ACCOUNT_{account_id}'))
        keyboard.adjust(1)
        
        status_text = "–ê–∫—Ç–∏–≤–µ–Ω" if account['status'] == 'active' else "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
        api_status = "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω" if account.get('api_id') and account.get('api_hash') else "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        await callback.message.answer(
            f'üë§ –ê–∫–∫–∞—É–Ω—Ç: {account["name"]}\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: {account["phone"]}\nüìä –°—Ç–∞—Ç—É—Å: {status_text}\nüîë API: {api_status}',
            reply_markup=keyboard.as_markup()
        )
    await callback.answer()

@dp.callback_query(F.data.startswith('ACTIVATE_'))
async def handle_activate_account(callback: types.CallbackQuery):
    account_id = callback.data.split('_')[1]
    if db.set_account_status(account_id, 'active'):
        await callback.message.answer('‚úÖ –ê–∫–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!')
    else:
        await callback.message.answer('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞')
    await callback.answer()

@dp.callback_query(F.data.startswith('DEACTIVATE_'))
async def handle_deactivate_account(callback: types.CallbackQuery):
    account_id = callback.data.split('_')[1]
    if db.set_account_status(account_id, 'inactive'):
        await callback.message.answer('‚úÖ –ê–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!')
    else:
        await callback.message.answer('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞')
    await callback.answer()

@dp.callback_query(F.data.startswith('DELETE_ACCOUNT_'))
async def handle_delete_account(callback: types.CallbackQuery):
    account_id = callback.data.split('_')[2]
    
    account = db.get_account_by_id(account_id)
    if not account:
        await callback.message.answer('‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')
        await callback.answer()
        return
    if db.delete_account(account_id):
        session_file = account.get('session_file')
        if session_file:
            try:
                import os
                session_path = f"{session_file}.session"
                if os.path.exists(session_path):
                    os.remove(session_path)
                    print(f"‚úÖ –§–∞–π–ª —Å–µ—Å—Å–∏–∏ {session_path} —É–¥–∞–ª–µ–Ω")
                else:
                    print(f"‚ö†Ô∏è –§–∞–π–ª —Å–µ—Å—Å–∏–∏ {session_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏: {e}")
        
        await callback.message.answer('‚úÖ –ê–∫–∫–∞—É–Ω—Ç –∏ —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏ —É–¥–∞–ª–µ–Ω—ã!')
    else:
        await callback.message.answer('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞')
    await callback.answer()

@dp.message(F.photo)
async def download_photo(message: types.Message):
    try:
        settings = db.settings()
        old_photo_path = settings[1] if settings[1] else None
        
        photo = message.photo[-1]
        file_id = photo.file_id
        
        file = await bot.get_file(file_id)
        file_path = f"photos/photo_{file_id}.jpg"
        
        import os
        os.makedirs("photos", exist_ok=True)
        
        await bot.download_file(file.file_path, file_path)
        
        db.change_photo(file_path)
        if (old_photo_path and old_photo_path.strip() and 
            os.path.exists(old_photo_path) and 
            old_photo_path != file_path):
            try:
                os.remove(old_photo_path)
                print(f"–£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–æ–µ —Ñ–æ—Ç–æ: {old_photo_path}")
            except Exception as delete_error:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ç–æ: {delete_error}")
        
        await message.answer('üñº –§–æ—Ç–æ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!')
        
    except Exception as e:
        await message.answer(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ: {e}')
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: {e}")


async def start_spam(x):
    if db.settings()[4] == 1:
        spam_list = []
        for i in await user.get_chats():
            try:
                addit_text = db.get_additional_text(i['id'])[0]
            except:
                addit_text = ''
            i['text'] = addit_text
            spam_list.append(i)
        settings = db.settings()
        tksNumber = asyncio.create_task(user.spamming(spam_list, settings, db, bot))

async def main():
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await dp.start_polling(bot)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
