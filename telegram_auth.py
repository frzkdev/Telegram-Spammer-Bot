import asyncio
from pyrogram import Client
from pyrogram.errors import FloodWait, PhoneCodeInvalid, PhoneCodeExpired, SessionPasswordNeeded
import config

class TelegramAuth:
    def __init__(self, account, bot, admin_id):
        self.account = account
        self.bot = bot
        self.admin_id = admin_id
        self.client = None
        self.auth_step = 0
        self.phone_code_hash = None
        
    async def start_auth(self):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        try:
            session_name = self.account.get('session_file')
            if not session_name:
                phone = self.account.get('phone', 'default')
                session_name = f"account_{phone.replace('+', '').replace('-', '').replace(' ', '')}"
            
            api_id = self.account.get('api_id')
            api_hash = self.account.get('api_hash')
            
            if not api_id or not api_hash:
                raise Exception("API_ID –∏–ª–∏ API_HASH –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞")
            
            try:
                api_id = int(api_id)
            except ValueError:
                raise Exception("API_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            
            self.client = Client(session_name, api_id, api_hash)
            
            await self.bot.send_message(
                self.admin_id, 
                f"üîë –ù–∞—á–∏–Ω–∞—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é"
            )
            
            await self.client.connect()
            
            await asyncio.sleep(5)
            sent_code = await self.client.send_code(self.account['phone'])
            self.phone_code_hash = sent_code.phone_code_hash
            
            await self.bot.send_message(
                self.admin_id,
                f"üì± –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –Ω–æ–º–µ—Ä {self.account['phone']}\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:"
            )
            
            return True
            
        except FloodWait as e:
            await self.bot.send_message(
                self.admin_id,
                f"‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {e.value} —Å–µ–∫—É–Ω–¥"
            )
            return False
        except Exception as e:
            await self.bot.send_message(
                self.admin_id,
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞: {e}"
            )
            return False
    
    async def verify_code(self, code):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        try:
            code_str = str(code).strip()
            
            print(f"DEBUG: –ö–æ–¥ '{code_str}', phone_code_hash: {self.phone_code_hash[:10] if self.phone_code_hash else 'None'}")
            print(f"DEBUG: –¢–∏–ø phone_code_hash: {type(self.phone_code_hash)}")
            
            if not code_str:
                await self.bot.send_message(
                    self.admin_id,
                    "‚ùå –ö–æ–¥ –ø—É—Å—Ç–æ–π! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
                return False
            
            await self.client.sign_in(
                phone_number=self.account['phone'],
                phone_code=code_str,
                phone_code_hash=self.phone_code_hash
            )
            
            
            await self.client.disconnect()
            return True
            
        except Exception as e:
            if "PASSWORD_HASH_INVALID" in str(e) or "SESSION_PASSWORD_NEEDED" in str(e):
                await self.bot.send_message(
                    self.admin_id,
                    f"üîê –í–∫–ª—é—á–µ–Ω–∞ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è\n\n–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:"
                )
                return "password_needed"
            elif "PHONE_CODE_EXPIRED" in str(e):
                await self.bot.send_message(
                    self.admin_id,
                    f"‚è∞ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å—Ç–µ–∫. –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–æ–≤—ã–π –∫–æ–¥..."
                )
                try:
                    await asyncio.sleep(3)
                    sent_code = await self.client.send_code(self.account['phone'])
                    self.phone_code_hash = sent_code.phone_code_hash
                    await self.bot.send_message(
                        self.admin_id,
                        f"üì± –ù–æ–≤—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –Ω–æ–º–µ—Ä {self.account['phone']}\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:"
                    )
                    return "new_code_sent"
                except Exception as send_error:
                    await self.bot.send_message(
                        self.admin_id,
                        f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞: {send_error}"
                    )
                    return False
            elif "PHONE_CODE_INVALID" in str(e):
                await self.bot.send_message(
                    self.admin_id,
                    f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞."
                )
                return False
            else:
                await self.bot.send_message(
                    self.admin_id,
                    f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}"
                )
                return False
    
    async def verify_password(self, password):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        try:
            await self.client.check_password(password)
            
            
            await self.client.disconnect()
            return True
            
        except Exception as e:
            return False
